/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsultaService } from "../consulta.service";
import { ConsultaCreateInput } from "./ConsultaCreateInput";
import { Consulta } from "./Consulta";
import { ConsultaFindManyArgs } from "./ConsultaFindManyArgs";
import { ConsultaWhereUniqueInput } from "./ConsultaWhereUniqueInput";
import { ConsultaUpdateInput } from "./ConsultaUpdateInput";

export class ConsultaControllerBase {
  constructor(protected readonly service: ConsultaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consulta })
  async createConsulta(
    @common.Body() data: ConsultaCreateInput
  ): Promise<Consulta> {
    return await this.service.createConsulta({
      data: {
        ...data,

        paciente: data.paciente
          ? {
              connect: data.paciente,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dataHora: true,
        id: true,
        observacoes: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consulta] })
  @ApiNestedQuery(ConsultaFindManyArgs)
  async consultas(@common.Req() request: Request): Promise<Consulta[]> {
    const args = plainToClass(ConsultaFindManyArgs, request.query);
    return this.service.consultas({
      ...args,
      select: {
        createdAt: true,
        dataHora: true,
        id: true,
        observacoes: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consulta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consulta(
    @common.Param() params: ConsultaWhereUniqueInput
  ): Promise<Consulta | null> {
    const result = await this.service.consulta({
      where: params,
      select: {
        createdAt: true,
        dataHora: true,
        id: true,
        observacoes: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consulta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsulta(
    @common.Param() params: ConsultaWhereUniqueInput,
    @common.Body() data: ConsultaUpdateInput
  ): Promise<Consulta | null> {
    try {
      return await this.service.updateConsulta({
        where: params,
        data: {
          ...data,

          paciente: data.paciente
            ? {
                connect: data.paciente,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dataHora: true,
          id: true,
          observacoes: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consulta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsulta(
    @common.Param() params: ConsultaWhereUniqueInput
  ): Promise<Consulta | null> {
    try {
      return await this.service.deleteConsulta({
        where: params,
        select: {
          createdAt: true,
          dataHora: true,
          id: true,
          observacoes: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

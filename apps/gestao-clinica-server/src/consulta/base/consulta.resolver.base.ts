/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Consulta } from "./Consulta";
import { ConsultaCountArgs } from "./ConsultaCountArgs";
import { ConsultaFindManyArgs } from "./ConsultaFindManyArgs";
import { ConsultaFindUniqueArgs } from "./ConsultaFindUniqueArgs";
import { CreateConsultaArgs } from "./CreateConsultaArgs";
import { UpdateConsultaArgs } from "./UpdateConsultaArgs";
import { DeleteConsultaArgs } from "./DeleteConsultaArgs";
import { Pacientes } from "../../pacientes/base/Pacientes";
import { ConsultaService } from "../consulta.service";
@graphql.Resolver(() => Consulta)
export class ConsultaResolverBase {
  constructor(protected readonly service: ConsultaService) {}

  async _consultasMeta(
    @graphql.Args() args: ConsultaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Consulta])
  async consultas(
    @graphql.Args() args: ConsultaFindManyArgs
  ): Promise<Consulta[]> {
    return this.service.consultas(args);
  }

  @graphql.Query(() => Consulta, { nullable: true })
  async consulta(
    @graphql.Args() args: ConsultaFindUniqueArgs
  ): Promise<Consulta | null> {
    const result = await this.service.consulta(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Consulta)
  async createConsulta(
    @graphql.Args() args: CreateConsultaArgs
  ): Promise<Consulta> {
    return await this.service.createConsulta({
      ...args,
      data: {
        ...args.data,

        paciente: args.data.paciente
          ? {
              connect: args.data.paciente,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Consulta)
  async updateConsulta(
    @graphql.Args() args: UpdateConsultaArgs
  ): Promise<Consulta | null> {
    try {
      return await this.service.updateConsulta({
        ...args,
        data: {
          ...args.data,

          paciente: args.data.paciente
            ? {
                connect: args.data.paciente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consulta)
  async deleteConsulta(
    @graphql.Args() args: DeleteConsultaArgs
  ): Promise<Consulta | null> {
    try {
      return await this.service.deleteConsulta(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pacientes, {
    nullable: true,
    name: "paciente",
  })
  async getPaciente(
    @graphql.Parent() parent: Consulta
  ): Promise<Pacientes | null> {
    const result = await this.service.getPaciente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

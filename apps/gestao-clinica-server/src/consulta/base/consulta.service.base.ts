/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Consulta as PrismaConsulta,
  Pacientes as PrismaPacientes,
} from "@prisma/client";

export class ConsultaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ConsultaCountArgs, "select">): Promise<number> {
    return this.prisma.consulta.count(args);
  }

  async consultas<T extends Prisma.ConsultaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsultaFindManyArgs>
  ): Promise<PrismaConsulta[]> {
    return this.prisma.consulta.findMany<Prisma.ConsultaFindManyArgs>(args);
  }
  async consulta<T extends Prisma.ConsultaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsultaFindUniqueArgs>
  ): Promise<PrismaConsulta | null> {
    return this.prisma.consulta.findUnique(args);
  }
  async createConsulta<T extends Prisma.ConsultaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsultaCreateArgs>
  ): Promise<PrismaConsulta> {
    return this.prisma.consulta.create<T>(args);
  }
  async updateConsulta<T extends Prisma.ConsultaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsultaUpdateArgs>
  ): Promise<PrismaConsulta> {
    return this.prisma.consulta.update<T>(args);
  }
  async deleteConsulta<T extends Prisma.ConsultaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsultaDeleteArgs>
  ): Promise<PrismaConsulta> {
    return this.prisma.consulta.delete(args);
  }

  async getPaciente(parentId: string): Promise<PrismaPacientes | null> {
    return this.prisma.consulta
      .findUnique({
        where: { id: parentId },
      })
      .paciente();
  }
}

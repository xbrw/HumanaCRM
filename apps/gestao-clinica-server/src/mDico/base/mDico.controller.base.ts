/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MDicoService } from "../mDico.service";
import { MDicoCreateInput } from "./MDicoCreateInput";
import { MDico } from "./MDico";
import { MDicoFindManyArgs } from "./MDicoFindManyArgs";
import { MDicoWhereUniqueInput } from "./MDicoWhereUniqueInput";
import { MDicoUpdateInput } from "./MDicoUpdateInput";

export class MDicoControllerBase {
  constructor(protected readonly service: MDicoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MDico })
  async createMDico(@common.Body() data: MDicoCreateInput): Promise<MDico> {
    return await this.service.createMDico({
      data: data,
      select: {
        contato: true,
        createdAt: true,
        crm: true,
        especialidade: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MDico] })
  @ApiNestedQuery(MDicoFindManyArgs)
  async mDicos(@common.Req() request: Request): Promise<MDico[]> {
    const args = plainToClass(MDicoFindManyArgs, request.query);
    return this.service.mDicos({
      ...args,
      select: {
        contato: true,
        createdAt: true,
        crm: true,
        especialidade: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MDico })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mDico(
    @common.Param() params: MDicoWhereUniqueInput
  ): Promise<MDico | null> {
    const result = await this.service.mDico({
      where: params,
      select: {
        contato: true,
        createdAt: true,
        crm: true,
        especialidade: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MDico })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMDico(
    @common.Param() params: MDicoWhereUniqueInput,
    @common.Body() data: MDicoUpdateInput
  ): Promise<MDico | null> {
    try {
      return await this.service.updateMDico({
        where: params,
        data: data,
        select: {
          contato: true,
          createdAt: true,
          crm: true,
          especialidade: true,
          id: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MDico })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMDico(
    @common.Param() params: MDicoWhereUniqueInput
  ): Promise<MDico | null> {
    try {
      return await this.service.deleteMDico({
        where: params,
        select: {
          contato: true,
          createdAt: true,
          crm: true,
          especialidade: true,
          id: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

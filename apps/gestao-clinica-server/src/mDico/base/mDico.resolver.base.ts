/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MDico } from "./MDico";
import { MDicoCountArgs } from "./MDicoCountArgs";
import { MDicoFindManyArgs } from "./MDicoFindManyArgs";
import { MDicoFindUniqueArgs } from "./MDicoFindUniqueArgs";
import { CreateMDicoArgs } from "./CreateMDicoArgs";
import { UpdateMDicoArgs } from "./UpdateMDicoArgs";
import { DeleteMDicoArgs } from "./DeleteMDicoArgs";
import { MDicoService } from "../mDico.service";
@graphql.Resolver(() => MDico)
export class MDicoResolverBase {
  constructor(protected readonly service: MDicoService) {}

  async _mDicosMeta(
    @graphql.Args() args: MDicoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MDico])
  async mDicos(@graphql.Args() args: MDicoFindManyArgs): Promise<MDico[]> {
    return this.service.mDicos(args);
  }

  @graphql.Query(() => MDico, { nullable: true })
  async mDico(
    @graphql.Args() args: MDicoFindUniqueArgs
  ): Promise<MDico | null> {
    const result = await this.service.mDico(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MDico)
  async createMDico(@graphql.Args() args: CreateMDicoArgs): Promise<MDico> {
    return await this.service.createMDico({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MDico)
  async updateMDico(
    @graphql.Args() args: UpdateMDicoArgs
  ): Promise<MDico | null> {
    try {
      return await this.service.updateMDico({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MDico)
  async deleteMDico(
    @graphql.Args() args: DeleteMDicoArgs
  ): Promise<MDico | null> {
    try {
      return await this.service.deleteMDico(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

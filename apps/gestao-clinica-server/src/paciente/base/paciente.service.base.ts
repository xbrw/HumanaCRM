/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Paciente as PrismaPaciente } from "@prisma/client";

export class PacienteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PacienteCountArgs, "select">): Promise<number> {
    return this.prisma.paciente.count(args);
  }

  async pacientes<T extends Prisma.PacienteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacienteFindManyArgs>
  ): Promise<PrismaPaciente[]> {
    return this.prisma.paciente.findMany<Prisma.PacienteFindManyArgs>(args);
  }
  async paciente<T extends Prisma.PacienteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacienteFindUniqueArgs>
  ): Promise<PrismaPaciente | null> {
    return this.prisma.paciente.findUnique(args);
  }
  async createPaciente<T extends Prisma.PacienteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacienteCreateArgs>
  ): Promise<PrismaPaciente> {
    return this.prisma.paciente.create<T>(args);
  }
  async updatePaciente<T extends Prisma.PacienteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacienteUpdateArgs>
  ): Promise<PrismaPaciente> {
    return this.prisma.paciente.update<T>(args);
  }
  async deletePaciente<T extends Prisma.PacienteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacienteDeleteArgs>
  ): Promise<PrismaPaciente> {
    return this.prisma.paciente.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProntuRio as PrismaProntuRio } from "@prisma/client";

export class ProntuRioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProntuRioCountArgs, "select">
  ): Promise<number> {
    return this.prisma.prontuRio.count(args);
  }

  async prontuRios<T extends Prisma.ProntuRioFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProntuRioFindManyArgs>
  ): Promise<PrismaProntuRio[]> {
    return this.prisma.prontuRio.findMany<Prisma.ProntuRioFindManyArgs>(args);
  }
  async prontuRio<T extends Prisma.ProntuRioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProntuRioFindUniqueArgs>
  ): Promise<PrismaProntuRio | null> {
    return this.prisma.prontuRio.findUnique(args);
  }
  async createProntuRio<T extends Prisma.ProntuRioCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProntuRioCreateArgs>
  ): Promise<PrismaProntuRio> {
    return this.prisma.prontuRio.create<T>(args);
  }
  async updateProntuRio<T extends Prisma.ProntuRioUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProntuRioUpdateArgs>
  ): Promise<PrismaProntuRio> {
    return this.prisma.prontuRio.update<T>(args);
  }
  async deleteProntuRio<T extends Prisma.ProntuRioDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProntuRioDeleteArgs>
  ): Promise<PrismaProntuRio> {
    return this.prisma.prontuRio.delete(args);
  }
}

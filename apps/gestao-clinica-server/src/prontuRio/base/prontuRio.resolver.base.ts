/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProntuRio } from "./ProntuRio";
import { ProntuRioCountArgs } from "./ProntuRioCountArgs";
import { ProntuRioFindManyArgs } from "./ProntuRioFindManyArgs";
import { ProntuRioFindUniqueArgs } from "./ProntuRioFindUniqueArgs";
import { CreateProntuRioArgs } from "./CreateProntuRioArgs";
import { UpdateProntuRioArgs } from "./UpdateProntuRioArgs";
import { DeleteProntuRioArgs } from "./DeleteProntuRioArgs";
import { ProntuRioService } from "../prontuRio.service";
@graphql.Resolver(() => ProntuRio)
export class ProntuRioResolverBase {
  constructor(protected readonly service: ProntuRioService) {}

  async _prontuRiosMeta(
    @graphql.Args() args: ProntuRioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProntuRio])
  async prontuRios(
    @graphql.Args() args: ProntuRioFindManyArgs
  ): Promise<ProntuRio[]> {
    return this.service.prontuRios(args);
  }

  @graphql.Query(() => ProntuRio, { nullable: true })
  async prontuRio(
    @graphql.Args() args: ProntuRioFindUniqueArgs
  ): Promise<ProntuRio | null> {
    const result = await this.service.prontuRio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProntuRio)
  async createProntuRio(
    @graphql.Args() args: CreateProntuRioArgs
  ): Promise<ProntuRio> {
    return await this.service.createProntuRio({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProntuRio)
  async updateProntuRio(
    @graphql.Args() args: UpdateProntuRioArgs
  ): Promise<ProntuRio | null> {
    try {
      return await this.service.updateProntuRio({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProntuRio)
  async deleteProntuRio(
    @graphql.Args() args: DeleteProntuRioArgs
  ): Promise<ProntuRio | null> {
    try {
      return await this.service.deleteProntuRio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

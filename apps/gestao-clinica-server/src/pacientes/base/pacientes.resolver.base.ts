/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pacientes } from "./Pacientes";
import { PacientesCountArgs } from "./PacientesCountArgs";
import { PacientesFindManyArgs } from "./PacientesFindManyArgs";
import { PacientesFindUniqueArgs } from "./PacientesFindUniqueArgs";
import { CreatePacientesArgs } from "./CreatePacientesArgs";
import { UpdatePacientesArgs } from "./UpdatePacientesArgs";
import { DeletePacientesArgs } from "./DeletePacientesArgs";
import { AgendamentoFindManyArgs } from "../../agendamento/base/AgendamentoFindManyArgs";
import { Agendamento } from "../../agendamento/base/Agendamento";
import { ConsultaFindManyArgs } from "../../consulta/base/ConsultaFindManyArgs";
import { Consulta } from "../../consulta/base/Consulta";
import { ConsultasFindManyArgs } from "../../consultas/base/ConsultasFindManyArgs";
import { Consultas } from "../../consultas/base/Consultas";
import { ProntuRiosEletrNicosFindManyArgs } from "../../prontuRiosEletrNicos/base/ProntuRiosEletrNicosFindManyArgs";
import { ProntuRiosEletrNicos } from "../../prontuRiosEletrNicos/base/ProntuRiosEletrNicos";
import { PacientesCreateInput } from "./PacientesCreateInput";
import { PacientesService } from "../pacientes.service";
@graphql.Resolver(() => Pacientes)
export class PacientesResolverBase {
  constructor(protected readonly service: PacientesService) {}

  async _pacientesItemsMeta(
    @graphql.Args() args: PacientesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pacientes])
  async pacientesItems(
    @graphql.Args() args: PacientesFindManyArgs
  ): Promise<Pacientes[]> {
    return this.service.pacientesItems(args);
  }

  @graphql.Query(() => Pacientes, { nullable: true })
  async pacientes(
    @graphql.Args() args: PacientesFindUniqueArgs
  ): Promise<Pacientes | null> {
    const result = await this.service.pacientes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pacientes)
  async createPacientes(
    @graphql.Args() args: CreatePacientesArgs
  ): Promise<Pacientes> {
    return await this.service.createPacientes({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pacientes)
  async updatePacientes(
    @graphql.Args() args: UpdatePacientesArgs
  ): Promise<Pacientes | null> {
    try {
      return await this.service.updatePacientes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pacientes)
  async deletePacientes(
    @graphql.Args() args: DeletePacientesArgs
  ): Promise<Pacientes | null> {
    try {
      return await this.service.deletePacientes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Agendamento], { name: "agendamentos" })
  async findAgendamentos(
    @graphql.Parent() parent: Pacientes,
    @graphql.Args() args: AgendamentoFindManyArgs
  ): Promise<Agendamento[]> {
    const results = await this.service.findAgendamentos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Consulta], { name: "consultas" })
  async findConsultas(
    @graphql.Parent() parent: Pacientes,
    @graphql.Args() args: ConsultaFindManyArgs
  ): Promise<Consulta[]> {
    const results = await this.service.findConsultas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Consultas], { name: "consultasItems" })
  async findConsultasItems(
    @graphql.Parent() parent: Pacientes,
    @graphql.Args() args: ConsultasFindManyArgs
  ): Promise<Consultas[]> {
    const results = await this.service.findConsultasItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProntuRiosEletrNicos], {
    name: "prontuRiosEletrNicosItems",
  })
  async findProntuRiosEletrNicosItems(
    @graphql.Parent() parent: Pacientes,
    @graphql.Args() args: ProntuRiosEletrNicosFindManyArgs
  ): Promise<ProntuRiosEletrNicos[]> {
    const results = await this.service.findProntuRiosEletrNicosItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Query(() => String)
  async CreatePacienteViaForm(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreatePacienteViaForm(args);
  }

  @graphql.Mutation(() => PacientesCreateInput)
  async CreatePatientFromForm(
    @graphql.Args()
    args: PacientesCreateInput
  ): Promise<PacientesCreateInput> {
    return this.service.CreatePatientFromForm(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Pacientes as PrismaPacientes,
  Agendamento as PrismaAgendamento,
  Consulta as PrismaConsulta,
  Consultas as PrismaConsultas,
  ProntuRiosEletrNicos as PrismaProntuRiosEletrNicos,
} from "@prisma/client";

import { PacientesCreateInput } from "./PacientesCreateInput";

export class PacientesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PacientesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pacientes.count(args);
  }

  async pacientesItems<T extends Prisma.PacientesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacientesFindManyArgs>
  ): Promise<PrismaPacientes[]> {
    return this.prisma.pacientes.findMany<Prisma.PacientesFindManyArgs>(args);
  }
  async pacientes<T extends Prisma.PacientesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacientesFindUniqueArgs>
  ): Promise<PrismaPacientes | null> {
    return this.prisma.pacientes.findUnique(args);
  }
  async createPacientes<T extends Prisma.PacientesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacientesCreateArgs>
  ): Promise<PrismaPacientes> {
    return this.prisma.pacientes.create<T>(args);
  }
  async updatePacientes<T extends Prisma.PacientesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacientesUpdateArgs>
  ): Promise<PrismaPacientes> {
    return this.prisma.pacientes.update<T>(args);
  }
  async deletePacientes<T extends Prisma.PacientesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PacientesDeleteArgs>
  ): Promise<PrismaPacientes> {
    return this.prisma.pacientes.delete(args);
  }

  async findAgendamentos(
    parentId: string,
    args: Prisma.AgendamentoFindManyArgs
  ): Promise<PrismaAgendamento[]> {
    return this.prisma.pacientes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .agendamentos(args);
  }

  async findConsultas(
    parentId: string,
    args: Prisma.ConsultaFindManyArgs
  ): Promise<PrismaConsulta[]> {
    return this.prisma.pacientes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .consultas(args);
  }

  async findConsultasItems(
    parentId: string,
    args: Prisma.ConsultasFindManyArgs
  ): Promise<PrismaConsultas[]> {
    return this.prisma.pacientes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .consultasItems(args);
  }

  async findProntuRiosEletrNicosItems(
    parentId: string,
    args: Prisma.ProntuRiosEletrNicosFindManyArgs
  ): Promise<PrismaProntuRiosEletrNicos[]> {
    return this.prisma.pacientes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .prontuRiosEletrNicosItems(args);
  }
  async CreatePacienteViaForm(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async CreatePatientFromForm(
    args: PacientesCreateInput
  ): Promise<PacientesCreateInput> {
    throw new Error("Not implemented");
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PacientesService } from "../pacientes.service";
import { PacientesCreateInput } from "./PacientesCreateInput";
import { Pacientes } from "./Pacientes";
import { PacientesFindManyArgs } from "./PacientesFindManyArgs";
import { PacientesWhereUniqueInput } from "./PacientesWhereUniqueInput";
import { PacientesUpdateInput } from "./PacientesUpdateInput";
import { AgendamentoFindManyArgs } from "../../agendamento/base/AgendamentoFindManyArgs";
import { Agendamento } from "../../agendamento/base/Agendamento";
import { AgendamentoWhereUniqueInput } from "../../agendamento/base/AgendamentoWhereUniqueInput";
import { ConsultaFindManyArgs } from "../../consulta/base/ConsultaFindManyArgs";
import { Consulta } from "../../consulta/base/Consulta";
import { ConsultaWhereUniqueInput } from "../../consulta/base/ConsultaWhereUniqueInput";
import { ConsultasFindManyArgs } from "../../consultas/base/ConsultasFindManyArgs";
import { Consultas } from "../../consultas/base/Consultas";
import { ConsultasWhereUniqueInput } from "../../consultas/base/ConsultasWhereUniqueInput";
import { ProntuRiosEletrNicosFindManyArgs } from "../../prontuRiosEletrNicos/base/ProntuRiosEletrNicosFindManyArgs";
import { ProntuRiosEletrNicos } from "../../prontuRiosEletrNicos/base/ProntuRiosEletrNicos";
import { ProntuRiosEletrNicosWhereUniqueInput } from "../../prontuRiosEletrNicos/base/ProntuRiosEletrNicosWhereUniqueInput";

export class PacientesControllerBase {
  constructor(protected readonly service: PacientesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pacientes })
  async createPacientes(
    @common.Body() data: PacientesCreateInput
  ): Promise<Pacientes> {
    return await this.service.createPacientes({
      data: data,
      select: {
        createdAt: true,
        email: true,
        endereO: true,
        histRicoMDico: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pacientes] })
  @ApiNestedQuery(PacientesFindManyArgs)
  async pacientesItems(@common.Req() request: Request): Promise<Pacientes[]> {
    const args = plainToClass(PacientesFindManyArgs, request.query);
    return this.service.pacientesItems({
      ...args,
      select: {
        createdAt: true,
        email: true,
        endereO: true,
        histRicoMDico: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pacientes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pacientes(
    @common.Param() params: PacientesWhereUniqueInput
  ): Promise<Pacientes | null> {
    const result = await this.service.pacientes({
      where: params,
      select: {
        createdAt: true,
        email: true,
        endereO: true,
        histRicoMDico: true,
        id: true,
        nome: true,
        telefone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pacientes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePacientes(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() data: PacientesUpdateInput
  ): Promise<Pacientes | null> {
    try {
      return await this.service.updatePacientes({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          endereO: true,
          histRicoMDico: true,
          id: true,
          nome: true,
          telefone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pacientes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePacientes(
    @common.Param() params: PacientesWhereUniqueInput
  ): Promise<Pacientes | null> {
    try {
      return await this.service.deletePacientes({
        where: params,
        select: {
          createdAt: true,
          email: true,
          endereO: true,
          histRicoMDico: true,
          id: true,
          nome: true,
          telefone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agendamentos")
  @ApiNestedQuery(AgendamentoFindManyArgs)
  async findAgendamentos(
    @common.Req() request: Request,
    @common.Param() params: PacientesWhereUniqueInput
  ): Promise<Agendamento[]> {
    const query = plainToClass(AgendamentoFindManyArgs, request.query);
    const results = await this.service.findAgendamentos(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        sala: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agendamentos")
  async connectAgendamentos(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: AgendamentoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentos: {
        connect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agendamentos")
  async updateAgendamentos(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: AgendamentoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentos: {
        set: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agendamentos")
  async disconnectAgendamentos(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: AgendamentoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentos: {
        disconnect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/consultas")
  @ApiNestedQuery(ConsultaFindManyArgs)
  async findConsultas(
    @common.Req() request: Request,
    @common.Param() params: PacientesWhereUniqueInput
  ): Promise<Consulta[]> {
    const query = plainToClass(ConsultaFindManyArgs, request.query);
    const results = await this.service.findConsultas(params.id, {
      ...query,
      select: {
        createdAt: true,
        dataHora: true,
        id: true,
        observacoes: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/consultas")
  async connectConsultas(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ConsultaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultas: {
        connect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/consultas")
  async updateConsultas(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ConsultaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultas: {
        set: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/consultas")
  async disconnectConsultas(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ConsultaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultas: {
        disconnect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/consultasItems")
  @ApiNestedQuery(ConsultasFindManyArgs)
  async findConsultasItems(
    @common.Req() request: Request,
    @common.Param() params: PacientesWhereUniqueInput
  ): Promise<Consultas[]> {
    const query = plainToClass(ConsultasFindManyArgs, request.query);
    const results = await this.service.findConsultasItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,
        diagnStico: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/consultasItems")
  async connectConsultasItems(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ConsultasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultasItems: {
        connect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/consultasItems")
  async updateConsultasItems(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ConsultasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultasItems: {
        set: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/consultasItems")
  async disconnectConsultasItems(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ConsultasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consultasItems: {
        disconnect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/prontuRiosEletrNicosItems")
  @ApiNestedQuery(ProntuRiosEletrNicosFindManyArgs)
  async findProntuRiosEletrNicosItems(
    @common.Req() request: Request,
    @common.Param() params: PacientesWhereUniqueInput
  ): Promise<ProntuRiosEletrNicos[]> {
    const query = plainToClass(ProntuRiosEletrNicosFindManyArgs, request.query);
    const results = await this.service.findProntuRiosEletrNicosItems(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          dadosClNicos: true,
          dataDeAtualizaO: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/prontuRiosEletrNicosItems")
  async connectProntuRiosEletrNicosItems(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ProntuRiosEletrNicosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prontuRiosEletrNicosItems: {
        connect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/prontuRiosEletrNicosItems")
  async updateProntuRiosEletrNicosItems(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ProntuRiosEletrNicosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prontuRiosEletrNicosItems: {
        set: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/prontuRiosEletrNicosItems")
  async disconnectProntuRiosEletrNicosItems(
    @common.Param() params: PacientesWhereUniqueInput,
    @common.Body() body: ProntuRiosEletrNicosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      prontuRiosEletrNicosItems: {
        disconnect: body,
      },
    };
    await this.service.updatePacientes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/create-paciente-via-form")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePacienteViaForm(
    @common.Body()
    body: PacientesCreateInput
  ): Promise<string> {
    return this.service.CreatePacienteViaForm(body);
  }

  @common.Post("/create-via-form")
  @swagger.ApiOkResponse({
    type: PacientesCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePatientFromForm(
    @common.Body()
    body: PacientesCreateInput
  ): Promise<PacientesCreateInput> {
    return this.service.CreatePatientFromForm(body);
  }
}

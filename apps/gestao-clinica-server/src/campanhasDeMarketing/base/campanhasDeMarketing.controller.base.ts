/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampanhasDeMarketingService } from "../campanhasDeMarketing.service";
import { CampanhasDeMarketingCreateInput } from "./CampanhasDeMarketingCreateInput";
import { CampanhasDeMarketing } from "./CampanhasDeMarketing";
import { CampanhasDeMarketingFindManyArgs } from "./CampanhasDeMarketingFindManyArgs";
import { CampanhasDeMarketingWhereUniqueInput } from "./CampanhasDeMarketingWhereUniqueInput";
import { CampanhasDeMarketingUpdateInput } from "./CampanhasDeMarketingUpdateInput";

export class CampanhasDeMarketingControllerBase {
  constructor(protected readonly service: CampanhasDeMarketingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CampanhasDeMarketing })
  async createCampanhasDeMarketing(
    @common.Body() data: CampanhasDeMarketingCreateInput
  ): Promise<CampanhasDeMarketing> {
    return await this.service.createCampanhasDeMarketing({
      data: data,
      select: {
        createdAt: true,
        fim: true,
        id: true,
        inCio: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CampanhasDeMarketing] })
  @ApiNestedQuery(CampanhasDeMarketingFindManyArgs)
  async campanhasDeMarketings(
    @common.Req() request: Request
  ): Promise<CampanhasDeMarketing[]> {
    const args = plainToClass(CampanhasDeMarketingFindManyArgs, request.query);
    return this.service.campanhasDeMarketings({
      ...args,
      select: {
        createdAt: true,
        fim: true,
        id: true,
        inCio: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CampanhasDeMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campanhasDeMarketing(
    @common.Param() params: CampanhasDeMarketingWhereUniqueInput
  ): Promise<CampanhasDeMarketing | null> {
    const result = await this.service.campanhasDeMarketing({
      where: params,
      select: {
        createdAt: true,
        fim: true,
        id: true,
        inCio: true,
        nome: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CampanhasDeMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampanhasDeMarketing(
    @common.Param() params: CampanhasDeMarketingWhereUniqueInput,
    @common.Body() data: CampanhasDeMarketingUpdateInput
  ): Promise<CampanhasDeMarketing | null> {
    try {
      return await this.service.updateCampanhasDeMarketing({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fim: true,
          id: true,
          inCio: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CampanhasDeMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampanhasDeMarketing(
    @common.Param() params: CampanhasDeMarketingWhereUniqueInput
  ): Promise<CampanhasDeMarketing | null> {
    try {
      return await this.service.deleteCampanhasDeMarketing({
        where: params,
        select: {
          createdAt: true,
          fim: true,
          id: true,
          inCio: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

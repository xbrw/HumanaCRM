/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CampanhasDeMarketing } from "./CampanhasDeMarketing";
import { CampanhasDeMarketingCountArgs } from "./CampanhasDeMarketingCountArgs";
import { CampanhasDeMarketingFindManyArgs } from "./CampanhasDeMarketingFindManyArgs";
import { CampanhasDeMarketingFindUniqueArgs } from "./CampanhasDeMarketingFindUniqueArgs";
import { CreateCampanhasDeMarketingArgs } from "./CreateCampanhasDeMarketingArgs";
import { UpdateCampanhasDeMarketingArgs } from "./UpdateCampanhasDeMarketingArgs";
import { DeleteCampanhasDeMarketingArgs } from "./DeleteCampanhasDeMarketingArgs";
import { CampanhasDeMarketingService } from "../campanhasDeMarketing.service";
@graphql.Resolver(() => CampanhasDeMarketing)
export class CampanhasDeMarketingResolverBase {
  constructor(protected readonly service: CampanhasDeMarketingService) {}

  async _campanhasDeMarketingsMeta(
    @graphql.Args() args: CampanhasDeMarketingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CampanhasDeMarketing])
  async campanhasDeMarketings(
    @graphql.Args() args: CampanhasDeMarketingFindManyArgs
  ): Promise<CampanhasDeMarketing[]> {
    return this.service.campanhasDeMarketings(args);
  }

  @graphql.Query(() => CampanhasDeMarketing, { nullable: true })
  async campanhasDeMarketing(
    @graphql.Args() args: CampanhasDeMarketingFindUniqueArgs
  ): Promise<CampanhasDeMarketing | null> {
    const result = await this.service.campanhasDeMarketing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CampanhasDeMarketing)
  async createCampanhasDeMarketing(
    @graphql.Args() args: CreateCampanhasDeMarketingArgs
  ): Promise<CampanhasDeMarketing> {
    return await this.service.createCampanhasDeMarketing({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CampanhasDeMarketing)
  async updateCampanhasDeMarketing(
    @graphql.Args() args: UpdateCampanhasDeMarketingArgs
  ): Promise<CampanhasDeMarketing | null> {
    try {
      return await this.service.updateCampanhasDeMarketing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CampanhasDeMarketing)
  async deleteCampanhasDeMarketing(
    @graphql.Args() args: DeleteCampanhasDeMarketingArgs
  ): Promise<CampanhasDeMarketing | null> {
    try {
      return await this.service.deleteCampanhasDeMarketing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Materiais } from "./Materiais";
import { MateriaisCountArgs } from "./MateriaisCountArgs";
import { MateriaisFindManyArgs } from "./MateriaisFindManyArgs";
import { MateriaisFindUniqueArgs } from "./MateriaisFindUniqueArgs";
import { CreateMateriaisArgs } from "./CreateMateriaisArgs";
import { UpdateMateriaisArgs } from "./UpdateMateriaisArgs";
import { DeleteMateriaisArgs } from "./DeleteMateriaisArgs";
import { MateriaisService } from "../materiais.service";
@graphql.Resolver(() => Materiais)
export class MateriaisResolverBase {
  constructor(protected readonly service: MateriaisService) {}

  async _materiaisItemsMeta(
    @graphql.Args() args: MateriaisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Materiais])
  async materiaisItems(
    @graphql.Args() args: MateriaisFindManyArgs
  ): Promise<Materiais[]> {
    return this.service.materiaisItems(args);
  }

  @graphql.Query(() => Materiais, { nullable: true })
  async materiais(
    @graphql.Args() args: MateriaisFindUniqueArgs
  ): Promise<Materiais | null> {
    const result = await this.service.materiais(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Materiais)
  async createMateriais(
    @graphql.Args() args: CreateMateriaisArgs
  ): Promise<Materiais> {
    return await this.service.createMateriais({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Materiais)
  async updateMateriais(
    @graphql.Args() args: UpdateMateriaisArgs
  ): Promise<Materiais | null> {
    try {
      return await this.service.updateMateriais({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Materiais)
  async deleteMateriais(
    @graphql.Args() args: DeleteMateriaisArgs
  ): Promise<Materiais | null> {
    try {
      return await this.service.deleteMateriais(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Materiais as PrismaMateriais } from "@prisma/client";

export class MateriaisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MateriaisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.materiais.count(args);
  }

  async materiaisItems<T extends Prisma.MateriaisFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MateriaisFindManyArgs>
  ): Promise<PrismaMateriais[]> {
    return this.prisma.materiais.findMany<Prisma.MateriaisFindManyArgs>(args);
  }
  async materiais<T extends Prisma.MateriaisFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MateriaisFindUniqueArgs>
  ): Promise<PrismaMateriais | null> {
    return this.prisma.materiais.findUnique(args);
  }
  async createMateriais<T extends Prisma.MateriaisCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MateriaisCreateArgs>
  ): Promise<PrismaMateriais> {
    return this.prisma.materiais.create<T>(args);
  }
  async updateMateriais<T extends Prisma.MateriaisUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MateriaisUpdateArgs>
  ): Promise<PrismaMateriais> {
    return this.prisma.materiais.update<T>(args);
  }
  async deleteMateriais<T extends Prisma.MateriaisDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MateriaisDeleteArgs>
  ): Promise<PrismaMateriais> {
    return this.prisma.materiais.delete(args);
  }
}

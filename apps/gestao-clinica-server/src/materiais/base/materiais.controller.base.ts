/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MateriaisService } from "../materiais.service";
import { MateriaisCreateInput } from "./MateriaisCreateInput";
import { Materiais } from "./Materiais";
import { MateriaisFindManyArgs } from "./MateriaisFindManyArgs";
import { MateriaisWhereUniqueInput } from "./MateriaisWhereUniqueInput";
import { MateriaisUpdateInput } from "./MateriaisUpdateInput";

export class MateriaisControllerBase {
  constructor(protected readonly service: MateriaisService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Materiais })
  async createMateriais(
    @common.Body() data: MateriaisCreateInput
  ): Promise<Materiais> {
    return await this.service.createMateriais({
      data: data,
      select: {
        createdAt: true,
        id: true,
        nome: true,
        quantidade: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Materiais] })
  @ApiNestedQuery(MateriaisFindManyArgs)
  async materiaisItems(@common.Req() request: Request): Promise<Materiais[]> {
    const args = plainToClass(MateriaisFindManyArgs, request.query);
    return this.service.materiaisItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        nome: true,
        quantidade: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Materiais })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async materiais(
    @common.Param() params: MateriaisWhereUniqueInput
  ): Promise<Materiais | null> {
    const result = await this.service.materiais({
      where: params,
      select: {
        createdAt: true,
        id: true,
        nome: true,
        quantidade: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Materiais })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMateriais(
    @common.Param() params: MateriaisWhereUniqueInput,
    @common.Body() data: MateriaisUpdateInput
  ): Promise<Materiais | null> {
    try {
      return await this.service.updateMateriais({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          nome: true,
          quantidade: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Materiais })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMateriais(
    @common.Param() params: MateriaisWhereUniqueInput
  ): Promise<Materiais | null> {
    try {
      return await this.service.deleteMateriais({
        where: params,
        select: {
          createdAt: true,
          id: true,
          nome: true,
          quantidade: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ComunicaO } from "./ComunicaO";
import { ComunicaOCountArgs } from "./ComunicaOCountArgs";
import { ComunicaOFindManyArgs } from "./ComunicaOFindManyArgs";
import { ComunicaOFindUniqueArgs } from "./ComunicaOFindUniqueArgs";
import { CreateComunicaOArgs } from "./CreateComunicaOArgs";
import { UpdateComunicaOArgs } from "./UpdateComunicaOArgs";
import { DeleteComunicaOArgs } from "./DeleteComunicaOArgs";
import { ComunicaOService } from "../comunicaO.service";
@graphql.Resolver(() => ComunicaO)
export class ComunicaOResolverBase {
  constructor(protected readonly service: ComunicaOService) {}

  async _comunicaOSMeta(
    @graphql.Args() args: ComunicaOCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ComunicaO])
  async comunicaOS(
    @graphql.Args() args: ComunicaOFindManyArgs
  ): Promise<ComunicaO[]> {
    return this.service.comunicaOS(args);
  }

  @graphql.Query(() => ComunicaO, { nullable: true })
  async comunicaO(
    @graphql.Args() args: ComunicaOFindUniqueArgs
  ): Promise<ComunicaO | null> {
    const result = await this.service.comunicaO(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ComunicaO)
  async createComunicaO(
    @graphql.Args() args: CreateComunicaOArgs
  ): Promise<ComunicaO> {
    return await this.service.createComunicaO({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ComunicaO)
  async updateComunicaO(
    @graphql.Args() args: UpdateComunicaOArgs
  ): Promise<ComunicaO | null> {
    try {
      return await this.service.updateComunicaO({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComunicaO)
  async deleteComunicaO(
    @graphql.Args() args: DeleteComunicaOArgs
  ): Promise<ComunicaO | null> {
    try {
      return await this.service.deleteComunicaO(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

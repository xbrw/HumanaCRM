/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ComunicaOService } from "../comunicaO.service";
import { ComunicaOCreateInput } from "./ComunicaOCreateInput";
import { ComunicaO } from "./ComunicaO";
import { ComunicaOFindManyArgs } from "./ComunicaOFindManyArgs";
import { ComunicaOWhereUniqueInput } from "./ComunicaOWhereUniqueInput";
import { ComunicaOUpdateInput } from "./ComunicaOUpdateInput";

export class ComunicaOControllerBase {
  constructor(protected readonly service: ComunicaOService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ComunicaO })
  async createComunicaO(
    @common.Body() data: ComunicaOCreateInput
  ): Promise<ComunicaO> {
    return await this.service.createComunicaO({
      data: data,
      select: {
        createdAt: true,
        dataDeEnvio: true,
        destinatRio: true,
        id: true,
        mensagem: true,
        tipo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ComunicaO] })
  @ApiNestedQuery(ComunicaOFindManyArgs)
  async comunicaOS(@common.Req() request: Request): Promise<ComunicaO[]> {
    const args = plainToClass(ComunicaOFindManyArgs, request.query);
    return this.service.comunicaOS({
      ...args,
      select: {
        createdAt: true,
        dataDeEnvio: true,
        destinatRio: true,
        id: true,
        mensagem: true,
        tipo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ComunicaO })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async comunicaO(
    @common.Param() params: ComunicaOWhereUniqueInput
  ): Promise<ComunicaO | null> {
    const result = await this.service.comunicaO({
      where: params,
      select: {
        createdAt: true,
        dataDeEnvio: true,
        destinatRio: true,
        id: true,
        mensagem: true,
        tipo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ComunicaO })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateComunicaO(
    @common.Param() params: ComunicaOWhereUniqueInput,
    @common.Body() data: ComunicaOUpdateInput
  ): Promise<ComunicaO | null> {
    try {
      return await this.service.updateComunicaO({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dataDeEnvio: true,
          destinatRio: true,
          id: true,
          mensagem: true,
          tipo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ComunicaO })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteComunicaO(
    @common.Param() params: ComunicaOWhereUniqueInput
  ): Promise<ComunicaO | null> {
    try {
      return await this.service.deleteComunicaO({
        where: params,
        select: {
          createdAt: true,
          dataDeEnvio: true,
          destinatRio: true,
          id: true,
          mensagem: true,
          tipo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

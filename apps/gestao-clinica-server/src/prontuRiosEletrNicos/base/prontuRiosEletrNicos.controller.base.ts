/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProntuRiosEletrNicosService } from "../prontuRiosEletrNicos.service";
import { ProntuRiosEletrNicosCreateInput } from "./ProntuRiosEletrNicosCreateInput";
import { ProntuRiosEletrNicos } from "./ProntuRiosEletrNicos";
import { ProntuRiosEletrNicosFindManyArgs } from "./ProntuRiosEletrNicosFindManyArgs";
import { ProntuRiosEletrNicosWhereUniqueInput } from "./ProntuRiosEletrNicosWhereUniqueInput";
import { ProntuRiosEletrNicosUpdateInput } from "./ProntuRiosEletrNicosUpdateInput";

export class ProntuRiosEletrNicosControllerBase {
  constructor(protected readonly service: ProntuRiosEletrNicosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProntuRiosEletrNicos })
  async createProntuRiosEletrNicos(
    @common.Body() data: ProntuRiosEletrNicosCreateInput
  ): Promise<ProntuRiosEletrNicos> {
    return await this.service.createProntuRiosEletrNicos({
      data: {
        ...data,

        paciente: data.paciente
          ? {
              connect: data.paciente,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dadosClNicos: true,
        dataDeAtualizaO: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProntuRiosEletrNicos] })
  @ApiNestedQuery(ProntuRiosEletrNicosFindManyArgs)
  async prontuRiosEletrNicosItems(
    @common.Req() request: Request
  ): Promise<ProntuRiosEletrNicos[]> {
    const args = plainToClass(ProntuRiosEletrNicosFindManyArgs, request.query);
    return this.service.prontuRiosEletrNicosItems({
      ...args,
      select: {
        createdAt: true,
        dadosClNicos: true,
        dataDeAtualizaO: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProntuRiosEletrNicos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async prontuRiosEletrNicos(
    @common.Param() params: ProntuRiosEletrNicosWhereUniqueInput
  ): Promise<ProntuRiosEletrNicos | null> {
    const result = await this.service.prontuRiosEletrNicos({
      where: params,
      select: {
        createdAt: true,
        dadosClNicos: true,
        dataDeAtualizaO: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProntuRiosEletrNicos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProntuRiosEletrNicos(
    @common.Param() params: ProntuRiosEletrNicosWhereUniqueInput,
    @common.Body() data: ProntuRiosEletrNicosUpdateInput
  ): Promise<ProntuRiosEletrNicos | null> {
    try {
      return await this.service.updateProntuRiosEletrNicos({
        where: params,
        data: {
          ...data,

          paciente: data.paciente
            ? {
                connect: data.paciente,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dadosClNicos: true,
          dataDeAtualizaO: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProntuRiosEletrNicos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProntuRiosEletrNicos(
    @common.Param() params: ProntuRiosEletrNicosWhereUniqueInput
  ): Promise<ProntuRiosEletrNicos | null> {
    try {
      return await this.service.deleteProntuRiosEletrNicos({
        where: params,
        select: {
          createdAt: true,
          dadosClNicos: true,
          dataDeAtualizaO: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProntuRiosEletrNicos as PrismaProntuRiosEletrNicos,
  Pacientes as PrismaPacientes,
} from "@prisma/client";

export class ProntuRiosEletrNicosServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProntuRiosEletrNicosCountArgs, "select">
  ): Promise<number> {
    return this.prisma.prontuRiosEletrNicos.count(args);
  }

  async prontuRiosEletrNicosItems<
    T extends Prisma.ProntuRiosEletrNicosFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProntuRiosEletrNicosFindManyArgs>
  ): Promise<PrismaProntuRiosEletrNicos[]> {
    return this.prisma.prontuRiosEletrNicos.findMany<Prisma.ProntuRiosEletrNicosFindManyArgs>(
      args
    );
  }
  async prontuRiosEletrNicos<
    T extends Prisma.ProntuRiosEletrNicosFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProntuRiosEletrNicosFindUniqueArgs>
  ): Promise<PrismaProntuRiosEletrNicos | null> {
    return this.prisma.prontuRiosEletrNicos.findUnique(args);
  }
  async createProntuRiosEletrNicos<
    T extends Prisma.ProntuRiosEletrNicosCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProntuRiosEletrNicosCreateArgs>
  ): Promise<PrismaProntuRiosEletrNicos> {
    return this.prisma.prontuRiosEletrNicos.create<T>(args);
  }
  async updateProntuRiosEletrNicos<
    T extends Prisma.ProntuRiosEletrNicosUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProntuRiosEletrNicosUpdateArgs>
  ): Promise<PrismaProntuRiosEletrNicos> {
    return this.prisma.prontuRiosEletrNicos.update<T>(args);
  }
  async deleteProntuRiosEletrNicos<
    T extends Prisma.ProntuRiosEletrNicosDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProntuRiosEletrNicosDeleteArgs>
  ): Promise<PrismaProntuRiosEletrNicos> {
    return this.prisma.prontuRiosEletrNicos.delete(args);
  }

  async getPaciente(parentId: string): Promise<PrismaPacientes | null> {
    return this.prisma.prontuRiosEletrNicos
      .findUnique({
        where: { id: parentId },
      })
      .paciente();
  }
}

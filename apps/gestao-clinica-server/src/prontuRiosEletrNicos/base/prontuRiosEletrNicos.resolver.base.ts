/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProntuRiosEletrNicos } from "./ProntuRiosEletrNicos";
import { ProntuRiosEletrNicosCountArgs } from "./ProntuRiosEletrNicosCountArgs";
import { ProntuRiosEletrNicosFindManyArgs } from "./ProntuRiosEletrNicosFindManyArgs";
import { ProntuRiosEletrNicosFindUniqueArgs } from "./ProntuRiosEletrNicosFindUniqueArgs";
import { CreateProntuRiosEletrNicosArgs } from "./CreateProntuRiosEletrNicosArgs";
import { UpdateProntuRiosEletrNicosArgs } from "./UpdateProntuRiosEletrNicosArgs";
import { DeleteProntuRiosEletrNicosArgs } from "./DeleteProntuRiosEletrNicosArgs";
import { Pacientes } from "../../pacientes/base/Pacientes";
import { ProntuRiosEletrNicosService } from "../prontuRiosEletrNicos.service";
@graphql.Resolver(() => ProntuRiosEletrNicos)
export class ProntuRiosEletrNicosResolverBase {
  constructor(protected readonly service: ProntuRiosEletrNicosService) {}

  async _prontuRiosEletrNicosItemsMeta(
    @graphql.Args() args: ProntuRiosEletrNicosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProntuRiosEletrNicos])
  async prontuRiosEletrNicosItems(
    @graphql.Args() args: ProntuRiosEletrNicosFindManyArgs
  ): Promise<ProntuRiosEletrNicos[]> {
    return this.service.prontuRiosEletrNicosItems(args);
  }

  @graphql.Query(() => ProntuRiosEletrNicos, { nullable: true })
  async prontuRiosEletrNicos(
    @graphql.Args() args: ProntuRiosEletrNicosFindUniqueArgs
  ): Promise<ProntuRiosEletrNicos | null> {
    const result = await this.service.prontuRiosEletrNicos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProntuRiosEletrNicos)
  async createProntuRiosEletrNicos(
    @graphql.Args() args: CreateProntuRiosEletrNicosArgs
  ): Promise<ProntuRiosEletrNicos> {
    return await this.service.createProntuRiosEletrNicos({
      ...args,
      data: {
        ...args.data,

        paciente: args.data.paciente
          ? {
              connect: args.data.paciente,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProntuRiosEletrNicos)
  async updateProntuRiosEletrNicos(
    @graphql.Args() args: UpdateProntuRiosEletrNicosArgs
  ): Promise<ProntuRiosEletrNicos | null> {
    try {
      return await this.service.updateProntuRiosEletrNicos({
        ...args,
        data: {
          ...args.data,

          paciente: args.data.paciente
            ? {
                connect: args.data.paciente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProntuRiosEletrNicos)
  async deleteProntuRiosEletrNicos(
    @graphql.Args() args: DeleteProntuRiosEletrNicosArgs
  ): Promise<ProntuRiosEletrNicos | null> {
    try {
      return await this.service.deleteProntuRiosEletrNicos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pacientes, {
    nullable: true,
    name: "paciente",
  })
  async getPaciente(
    @graphql.Parent() parent: ProntuRiosEletrNicos
  ): Promise<Pacientes | null> {
    const result = await this.service.getPaciente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

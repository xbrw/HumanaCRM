/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Salas as PrismaSalas,
  Agendamento as PrismaAgendamento,
} from "@prisma/client";

export class SalasServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SalasCountArgs, "select">): Promise<number> {
    return this.prisma.salas.count(args);
  }

  async salasItems<T extends Prisma.SalasFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalasFindManyArgs>
  ): Promise<PrismaSalas[]> {
    return this.prisma.salas.findMany<Prisma.SalasFindManyArgs>(args);
  }
  async salas<T extends Prisma.SalasFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalasFindUniqueArgs>
  ): Promise<PrismaSalas | null> {
    return this.prisma.salas.findUnique(args);
  }
  async createSalas<T extends Prisma.SalasCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalasCreateArgs>
  ): Promise<PrismaSalas> {
    return this.prisma.salas.create<T>(args);
  }
  async updateSalas<T extends Prisma.SalasUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalasUpdateArgs>
  ): Promise<PrismaSalas> {
    return this.prisma.salas.update<T>(args);
  }
  async deleteSalas<T extends Prisma.SalasDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalasDeleteArgs>
  ): Promise<PrismaSalas> {
    return this.prisma.salas.delete(args);
  }

  async findAgendamentos(
    parentId: string,
    args: Prisma.AgendamentoFindManyArgs
  ): Promise<PrismaAgendamento[]> {
    return this.prisma.salas
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .agendamentos(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalasService } from "../salas.service";
import { SalasCreateInput } from "./SalasCreateInput";
import { Salas } from "./Salas";
import { SalasFindManyArgs } from "./SalasFindManyArgs";
import { SalasWhereUniqueInput } from "./SalasWhereUniqueInput";
import { SalasUpdateInput } from "./SalasUpdateInput";
import { AgendamentoFindManyArgs } from "../../agendamento/base/AgendamentoFindManyArgs";
import { Agendamento } from "../../agendamento/base/Agendamento";
import { AgendamentoWhereUniqueInput } from "../../agendamento/base/AgendamentoWhereUniqueInput";

export class SalasControllerBase {
  constructor(protected readonly service: SalasService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Salas })
  async createSalas(@common.Body() data: SalasCreateInput): Promise<Salas> {
    return await this.service.createSalas({
      data: data,
      select: {
        capacidade: true,
        createdAt: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Salas] })
  @ApiNestedQuery(SalasFindManyArgs)
  async salasItems(@common.Req() request: Request): Promise<Salas[]> {
    const args = plainToClass(SalasFindManyArgs, request.query);
    return this.service.salasItems({
      ...args,
      select: {
        capacidade: true,
        createdAt: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Salas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salas(
    @common.Param() params: SalasWhereUniqueInput
  ): Promise<Salas | null> {
    const result = await this.service.salas({
      where: params,
      select: {
        capacidade: true,
        createdAt: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Salas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalas(
    @common.Param() params: SalasWhereUniqueInput,
    @common.Body() data: SalasUpdateInput
  ): Promise<Salas | null> {
    try {
      return await this.service.updateSalas({
        where: params,
        data: data,
        select: {
          capacidade: true,
          createdAt: true,
          id: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Salas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalas(
    @common.Param() params: SalasWhereUniqueInput
  ): Promise<Salas | null> {
    try {
      return await this.service.deleteSalas({
        where: params,
        select: {
          capacidade: true,
          createdAt: true,
          id: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agendamentos")
  @ApiNestedQuery(AgendamentoFindManyArgs)
  async findAgendamentos(
    @common.Req() request: Request,
    @common.Param() params: SalasWhereUniqueInput
  ): Promise<Agendamento[]> {
    const query = plainToClass(AgendamentoFindManyArgs, request.query);
    const results = await this.service.findAgendamentos(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        sala: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agendamentos")
  async connectAgendamentos(
    @common.Param() params: SalasWhereUniqueInput,
    @common.Body() body: AgendamentoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentos: {
        connect: body,
      },
    };
    await this.service.updateSalas({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agendamentos")
  async updateAgendamentos(
    @common.Param() params: SalasWhereUniqueInput,
    @common.Body() body: AgendamentoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentos: {
        set: body,
      },
    };
    await this.service.updateSalas({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agendamentos")
  async disconnectAgendamentos(
    @common.Param() params: SalasWhereUniqueInput,
    @common.Body() body: AgendamentoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agendamentos: {
        disconnect: body,
      },
    };
    await this.service.updateSalas({
      where: params,
      data,
      select: { id: true },
    });
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Leads as PrismaLeads } from "@prisma/client";

export class LeadsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LeadsCountArgs, "select">): Promise<number> {
    return this.prisma.leads.count(args);
  }

  async leadsItems<T extends Prisma.LeadsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadsFindManyArgs>
  ): Promise<PrismaLeads[]> {
    return this.prisma.leads.findMany<Prisma.LeadsFindManyArgs>(args);
  }
  async leads<T extends Prisma.LeadsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadsFindUniqueArgs>
  ): Promise<PrismaLeads | null> {
    return this.prisma.leads.findUnique(args);
  }
  async createLeads<T extends Prisma.LeadsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadsCreateArgs>
  ): Promise<PrismaLeads> {
    return this.prisma.leads.create<T>(args);
  }
  async updateLeads<T extends Prisma.LeadsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadsUpdateArgs>
  ): Promise<PrismaLeads> {
    return this.prisma.leads.update<T>(args);
  }
  async deleteLeads<T extends Prisma.LeadsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadsDeleteArgs>
  ): Promise<PrismaLeads> {
    return this.prisma.leads.delete(args);
  }
}

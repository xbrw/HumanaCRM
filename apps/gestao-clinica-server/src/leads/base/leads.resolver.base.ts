/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Leads } from "./Leads";
import { LeadsCountArgs } from "./LeadsCountArgs";
import { LeadsFindManyArgs } from "./LeadsFindManyArgs";
import { LeadsFindUniqueArgs } from "./LeadsFindUniqueArgs";
import { CreateLeadsArgs } from "./CreateLeadsArgs";
import { UpdateLeadsArgs } from "./UpdateLeadsArgs";
import { DeleteLeadsArgs } from "./DeleteLeadsArgs";
import { LeadsService } from "../leads.service";
@graphql.Resolver(() => Leads)
export class LeadsResolverBase {
  constructor(protected readonly service: LeadsService) {}

  async _leadsItemsMeta(
    @graphql.Args() args: LeadsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Leads])
  async leadsItems(@graphql.Args() args: LeadsFindManyArgs): Promise<Leads[]> {
    return this.service.leadsItems(args);
  }

  @graphql.Query(() => Leads, { nullable: true })
  async leads(
    @graphql.Args() args: LeadsFindUniqueArgs
  ): Promise<Leads | null> {
    const result = await this.service.leads(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Leads)
  async createLeads(@graphql.Args() args: CreateLeadsArgs): Promise<Leads> {
    return await this.service.createLeads({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Leads)
  async updateLeads(
    @graphql.Args() args: UpdateLeadsArgs
  ): Promise<Leads | null> {
    try {
      return await this.service.updateLeads({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Leads)
  async deleteLeads(
    @graphql.Args() args: DeleteLeadsArgs
  ): Promise<Leads | null> {
    try {
      return await this.service.deleteLeads(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

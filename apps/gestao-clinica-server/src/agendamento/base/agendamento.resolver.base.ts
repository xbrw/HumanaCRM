/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Agendamento } from "./Agendamento";
import { AgendamentoCountArgs } from "./AgendamentoCountArgs";
import { AgendamentoFindManyArgs } from "./AgendamentoFindManyArgs";
import { AgendamentoFindUniqueArgs } from "./AgendamentoFindUniqueArgs";
import { CreateAgendamentoArgs } from "./CreateAgendamentoArgs";
import { UpdateAgendamentoArgs } from "./UpdateAgendamentoArgs";
import { DeleteAgendamentoArgs } from "./DeleteAgendamentoArgs";
import { Pacientes } from "../../pacientes/base/Pacientes";
import { Salas } from "../../salas/base/Salas";
import { AgendamentoService } from "../agendamento.service";
@graphql.Resolver(() => Agendamento)
export class AgendamentoResolverBase {
  constructor(protected readonly service: AgendamentoService) {}

  async _agendamentosMeta(
    @graphql.Args() args: AgendamentoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Agendamento])
  async agendamentos(
    @graphql.Args() args: AgendamentoFindManyArgs
  ): Promise<Agendamento[]> {
    return this.service.agendamentos(args);
  }

  @graphql.Query(() => Agendamento, { nullable: true })
  async agendamento(
    @graphql.Args() args: AgendamentoFindUniqueArgs
  ): Promise<Agendamento | null> {
    const result = await this.service.agendamento(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Agendamento)
  async createAgendamento(
    @graphql.Args() args: CreateAgendamentoArgs
  ): Promise<Agendamento> {
    return await this.service.createAgendamento({
      ...args,
      data: {
        ...args.data,

        paciente: args.data.paciente
          ? {
              connect: args.data.paciente,
            }
          : undefined,

        sala: args.data.sala
          ? {
              connect: args.data.sala,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Agendamento)
  async updateAgendamento(
    @graphql.Args() args: UpdateAgendamentoArgs
  ): Promise<Agendamento | null> {
    try {
      return await this.service.updateAgendamento({
        ...args,
        data: {
          ...args.data,

          paciente: args.data.paciente
            ? {
                connect: args.data.paciente,
              }
            : undefined,

          sala: args.data.sala
            ? {
                connect: args.data.sala,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Agendamento)
  async deleteAgendamento(
    @graphql.Args() args: DeleteAgendamentoArgs
  ): Promise<Agendamento | null> {
    try {
      return await this.service.deleteAgendamento(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pacientes, {
    nullable: true,
    name: "paciente",
  })
  async getPaciente(
    @graphql.Parent() parent: Agendamento
  ): Promise<Pacientes | null> {
    const result = await this.service.getPaciente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Salas, {
    nullable: true,
    name: "sala",
  })
  async getSala(@graphql.Parent() parent: Agendamento): Promise<Salas | null> {
    const result = await this.service.getSala(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async SendConsultaReminder(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.SendConsultaReminder(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Agendamento as PrismaAgendamento,
  Pacientes as PrismaPacientes,
  Salas as PrismaSalas,
} from "@prisma/client";

export class AgendamentoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AgendamentoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.agendamento.count(args);
  }

  async agendamentos<T extends Prisma.AgendamentoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgendamentoFindManyArgs>
  ): Promise<PrismaAgendamento[]> {
    return this.prisma.agendamento.findMany<Prisma.AgendamentoFindManyArgs>(
      args
    );
  }
  async agendamento<T extends Prisma.AgendamentoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgendamentoFindUniqueArgs>
  ): Promise<PrismaAgendamento | null> {
    return this.prisma.agendamento.findUnique(args);
  }
  async createAgendamento<T extends Prisma.AgendamentoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgendamentoCreateArgs>
  ): Promise<PrismaAgendamento> {
    return this.prisma.agendamento.create<T>(args);
  }
  async updateAgendamento<T extends Prisma.AgendamentoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgendamentoUpdateArgs>
  ): Promise<PrismaAgendamento> {
    return this.prisma.agendamento.update<T>(args);
  }
  async deleteAgendamento<T extends Prisma.AgendamentoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgendamentoDeleteArgs>
  ): Promise<PrismaAgendamento> {
    return this.prisma.agendamento.delete(args);
  }

  async getPaciente(parentId: string): Promise<PrismaPacientes | null> {
    return this.prisma.agendamento
      .findUnique({
        where: { id: parentId },
      })
      .paciente();
  }

  async getSala(parentId: string): Promise<PrismaSalas | null> {
    return this.prisma.agendamento
      .findUnique({
        where: { id: parentId },
      })
      .sala();
  }
  async SendConsultaReminder(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}

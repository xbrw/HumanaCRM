/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AgendamentoService } from "../agendamento.service";
import { AgendamentoCreateInput } from "./AgendamentoCreateInput";
import { Agendamento } from "./Agendamento";
import { AgendamentoFindManyArgs } from "./AgendamentoFindManyArgs";
import { AgendamentoWhereUniqueInput } from "./AgendamentoWhereUniqueInput";
import { AgendamentoUpdateInput } from "./AgendamentoUpdateInput";

export class AgendamentoControllerBase {
  constructor(protected readonly service: AgendamentoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Agendamento })
  async createAgendamento(
    @common.Body() data: AgendamentoCreateInput
  ): Promise<Agendamento> {
    return await this.service.createAgendamento({
      data: {
        ...data,

        paciente: data.paciente
          ? {
              connect: data.paciente,
            }
          : undefined,

        sala: data.sala
          ? {
              connect: data.sala,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        data: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        sala: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Agendamento] })
  @ApiNestedQuery(AgendamentoFindManyArgs)
  async agendamentos(@common.Req() request: Request): Promise<Agendamento[]> {
    const args = plainToClass(AgendamentoFindManyArgs, request.query);
    return this.service.agendamentos({
      ...args,
      select: {
        createdAt: true,
        data: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        sala: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Agendamento })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async agendamento(
    @common.Param() params: AgendamentoWhereUniqueInput
  ): Promise<Agendamento | null> {
    const result = await this.service.agendamento({
      where: params,
      select: {
        createdAt: true,
        data: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        sala: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Agendamento })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAgendamento(
    @common.Param() params: AgendamentoWhereUniqueInput,
    @common.Body() data: AgendamentoUpdateInput
  ): Promise<Agendamento | null> {
    try {
      return await this.service.updateAgendamento({
        where: params,
        data: {
          ...data,

          paciente: data.paciente
            ? {
                connect: data.paciente,
              }
            : undefined,

          sala: data.sala
            ? {
                connect: data.sala,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          data: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          sala: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Agendamento })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAgendamento(
    @common.Param() params: AgendamentoWhereUniqueInput
  ): Promise<Agendamento | null> {
    try {
      return await this.service.deleteAgendamento({
        where: params,
        select: {
          createdAt: true,
          data: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          sala: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/send-reminder")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendConsultaReminder(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendConsultaReminder(body);
  }
}

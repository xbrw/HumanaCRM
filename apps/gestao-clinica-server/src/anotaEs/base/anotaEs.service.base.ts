/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnotaEs as PrismaAnotaEs } from "@prisma/client";

export class AnotaEsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AnotaEsCountArgs, "select">): Promise<number> {
    return this.prisma.anotaEs.count(args);
  }

  async anotaEsItems<T extends Prisma.AnotaEsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnotaEsFindManyArgs>
  ): Promise<PrismaAnotaEs[]> {
    return this.prisma.anotaEs.findMany<Prisma.AnotaEsFindManyArgs>(args);
  }
  async anotaEs<T extends Prisma.AnotaEsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnotaEsFindUniqueArgs>
  ): Promise<PrismaAnotaEs | null> {
    return this.prisma.anotaEs.findUnique(args);
  }
  async createAnotaEs<T extends Prisma.AnotaEsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnotaEsCreateArgs>
  ): Promise<PrismaAnotaEs> {
    return this.prisma.anotaEs.create<T>(args);
  }
  async updateAnotaEs<T extends Prisma.AnotaEsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnotaEsUpdateArgs>
  ): Promise<PrismaAnotaEs> {
    return this.prisma.anotaEs.update<T>(args);
  }
  async deleteAnotaEs<T extends Prisma.AnotaEsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnotaEsDeleteArgs>
  ): Promise<PrismaAnotaEs> {
    return this.prisma.anotaEs.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tratamentos as PrismaTratamentos,
  Consultas as PrismaConsultas,
} from "@prisma/client";

export class TratamentosServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TratamentosCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tratamentos.count(args);
  }

  async tratamentosItems<T extends Prisma.TratamentosFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TratamentosFindManyArgs>
  ): Promise<PrismaTratamentos[]> {
    return this.prisma.tratamentos.findMany<Prisma.TratamentosFindManyArgs>(
      args
    );
  }
  async tratamentos<T extends Prisma.TratamentosFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TratamentosFindUniqueArgs>
  ): Promise<PrismaTratamentos | null> {
    return this.prisma.tratamentos.findUnique(args);
  }
  async createTratamentos<T extends Prisma.TratamentosCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TratamentosCreateArgs>
  ): Promise<PrismaTratamentos> {
    return this.prisma.tratamentos.create<T>(args);
  }
  async updateTratamentos<T extends Prisma.TratamentosUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TratamentosUpdateArgs>
  ): Promise<PrismaTratamentos> {
    return this.prisma.tratamentos.update<T>(args);
  }
  async deleteTratamentos<T extends Prisma.TratamentosDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TratamentosDeleteArgs>
  ): Promise<PrismaTratamentos> {
    return this.prisma.tratamentos.delete(args);
  }

  async getConsulta(parentId: string): Promise<PrismaConsultas | null> {
    return this.prisma.tratamentos
      .findUnique({
        where: { id: parentId },
      })
      .consulta();
  }
}

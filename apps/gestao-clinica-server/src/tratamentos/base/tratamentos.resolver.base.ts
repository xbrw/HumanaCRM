/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tratamentos } from "./Tratamentos";
import { TratamentosCountArgs } from "./TratamentosCountArgs";
import { TratamentosFindManyArgs } from "./TratamentosFindManyArgs";
import { TratamentosFindUniqueArgs } from "./TratamentosFindUniqueArgs";
import { CreateTratamentosArgs } from "./CreateTratamentosArgs";
import { UpdateTratamentosArgs } from "./UpdateTratamentosArgs";
import { DeleteTratamentosArgs } from "./DeleteTratamentosArgs";
import { Consultas } from "../../consultas/base/Consultas";
import { TratamentosService } from "../tratamentos.service";
@graphql.Resolver(() => Tratamentos)
export class TratamentosResolverBase {
  constructor(protected readonly service: TratamentosService) {}

  async _tratamentosItemsMeta(
    @graphql.Args() args: TratamentosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tratamentos])
  async tratamentosItems(
    @graphql.Args() args: TratamentosFindManyArgs
  ): Promise<Tratamentos[]> {
    return this.service.tratamentosItems(args);
  }

  @graphql.Query(() => Tratamentos, { nullable: true })
  async tratamentos(
    @graphql.Args() args: TratamentosFindUniqueArgs
  ): Promise<Tratamentos | null> {
    const result = await this.service.tratamentos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tratamentos)
  async createTratamentos(
    @graphql.Args() args: CreateTratamentosArgs
  ): Promise<Tratamentos> {
    return await this.service.createTratamentos({
      ...args,
      data: {
        ...args.data,

        consulta: args.data.consulta
          ? {
              connect: args.data.consulta,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tratamentos)
  async updateTratamentos(
    @graphql.Args() args: UpdateTratamentosArgs
  ): Promise<Tratamentos | null> {
    try {
      return await this.service.updateTratamentos({
        ...args,
        data: {
          ...args.data,

          consulta: args.data.consulta
            ? {
                connect: args.data.consulta,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tratamentos)
  async deleteTratamentos(
    @graphql.Args() args: DeleteTratamentosArgs
  ): Promise<Tratamentos | null> {
    try {
      return await this.service.deleteTratamentos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Consultas, {
    nullable: true,
    name: "consulta",
  })
  async getConsulta(
    @graphql.Parent() parent: Tratamentos
  ): Promise<Consultas | null> {
    const result = await this.service.getConsulta(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TratamentosService } from "../tratamentos.service";
import { TratamentosCreateInput } from "./TratamentosCreateInput";
import { Tratamentos } from "./Tratamentos";
import { TratamentosFindManyArgs } from "./TratamentosFindManyArgs";
import { TratamentosWhereUniqueInput } from "./TratamentosWhereUniqueInput";
import { TratamentosUpdateInput } from "./TratamentosUpdateInput";

export class TratamentosControllerBase {
  constructor(protected readonly service: TratamentosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tratamentos })
  async createTratamentos(
    @common.Body() data: TratamentosCreateInput
  ): Promise<Tratamentos> {
    return await this.service.createTratamentos({
      data: {
        ...data,

        consulta: data.consulta
          ? {
              connect: data.consulta,
            }
          : undefined,
      },
      select: {
        consulta: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descriO: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tratamentos] })
  @ApiNestedQuery(TratamentosFindManyArgs)
  async tratamentosItems(
    @common.Req() request: Request
  ): Promise<Tratamentos[]> {
    const args = plainToClass(TratamentosFindManyArgs, request.query);
    return this.service.tratamentosItems({
      ...args,
      select: {
        consulta: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descriO: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tratamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tratamentos(
    @common.Param() params: TratamentosWhereUniqueInput
  ): Promise<Tratamentos | null> {
    const result = await this.service.tratamentos({
      where: params,
      select: {
        consulta: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descriO: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tratamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTratamentos(
    @common.Param() params: TratamentosWhereUniqueInput,
    @common.Body() data: TratamentosUpdateInput
  ): Promise<Tratamentos | null> {
    try {
      return await this.service.updateTratamentos({
        where: params,
        data: {
          ...data,

          consulta: data.consulta
            ? {
                connect: data.consulta,
              }
            : undefined,
        },
        select: {
          consulta: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          descriO: true,
          id: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tratamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTratamentos(
    @common.Param() params: TratamentosWhereUniqueInput
  ): Promise<Tratamentos | null> {
    try {
      return await this.service.deleteTratamentos({
        where: params,
        select: {
          consulta: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          descriO: true,
          id: true,
          nome: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

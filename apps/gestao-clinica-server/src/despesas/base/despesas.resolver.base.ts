/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Despesas } from "./Despesas";
import { DespesasCountArgs } from "./DespesasCountArgs";
import { DespesasFindManyArgs } from "./DespesasFindManyArgs";
import { DespesasFindUniqueArgs } from "./DespesasFindUniqueArgs";
import { CreateDespesasArgs } from "./CreateDespesasArgs";
import { UpdateDespesasArgs } from "./UpdateDespesasArgs";
import { DeleteDespesasArgs } from "./DeleteDespesasArgs";
import { DespesasService } from "../despesas.service";
@graphql.Resolver(() => Despesas)
export class DespesasResolverBase {
  constructor(protected readonly service: DespesasService) {}

  async _despesasItemsMeta(
    @graphql.Args() args: DespesasCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Despesas])
  async despesasItems(
    @graphql.Args() args: DespesasFindManyArgs
  ): Promise<Despesas[]> {
    return this.service.despesasItems(args);
  }

  @graphql.Query(() => Despesas, { nullable: true })
  async despesas(
    @graphql.Args() args: DespesasFindUniqueArgs
  ): Promise<Despesas | null> {
    const result = await this.service.despesas(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Despesas)
  async createDespesas(
    @graphql.Args() args: CreateDespesasArgs
  ): Promise<Despesas> {
    return await this.service.createDespesas({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Despesas)
  async updateDespesas(
    @graphql.Args() args: UpdateDespesasArgs
  ): Promise<Despesas | null> {
    try {
      return await this.service.updateDespesas({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Despesas)
  async deleteDespesas(
    @graphql.Args() args: DeleteDespesasArgs
  ): Promise<Despesas | null> {
    try {
      return await this.service.deleteDespesas(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquipamentosService } from "../equipamentos.service";
import { EquipamentosCreateInput } from "./EquipamentosCreateInput";
import { Equipamentos } from "./Equipamentos";
import { EquipamentosFindManyArgs } from "./EquipamentosFindManyArgs";
import { EquipamentosWhereUniqueInput } from "./EquipamentosWhereUniqueInput";
import { EquipamentosUpdateInput } from "./EquipamentosUpdateInput";

export class EquipamentosControllerBase {
  constructor(protected readonly service: EquipamentosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Equipamentos })
  async createEquipamentos(
    @common.Body() data: EquipamentosCreateInput
  ): Promise<Equipamentos> {
    return await this.service.createEquipamentos({
      data: data,
      select: {
        createdAt: true,
        id: true,
        nome: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Equipamentos] })
  @ApiNestedQuery(EquipamentosFindManyArgs)
  async equipamentosItems(
    @common.Req() request: Request
  ): Promise<Equipamentos[]> {
    const args = plainToClass(EquipamentosFindManyArgs, request.query);
    return this.service.equipamentosItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        nome: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Equipamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async equipamentos(
    @common.Param() params: EquipamentosWhereUniqueInput
  ): Promise<Equipamentos | null> {
    const result = await this.service.equipamentos({
      where: params,
      select: {
        createdAt: true,
        id: true,
        nome: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Equipamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEquipamentos(
    @common.Param() params: EquipamentosWhereUniqueInput,
    @common.Body() data: EquipamentosUpdateInput
  ): Promise<Equipamentos | null> {
    try {
      return await this.service.updateEquipamentos({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          nome: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Equipamentos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEquipamentos(
    @common.Param() params: EquipamentosWhereUniqueInput
  ): Promise<Equipamentos | null> {
    try {
      return await this.service.deleteEquipamentos({
        where: params,
        select: {
          createdAt: true,
          id: true,
          nome: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

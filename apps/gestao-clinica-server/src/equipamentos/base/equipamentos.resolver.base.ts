/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Equipamentos } from "./Equipamentos";
import { EquipamentosCountArgs } from "./EquipamentosCountArgs";
import { EquipamentosFindManyArgs } from "./EquipamentosFindManyArgs";
import { EquipamentosFindUniqueArgs } from "./EquipamentosFindUniqueArgs";
import { CreateEquipamentosArgs } from "./CreateEquipamentosArgs";
import { UpdateEquipamentosArgs } from "./UpdateEquipamentosArgs";
import { DeleteEquipamentosArgs } from "./DeleteEquipamentosArgs";
import { EquipamentosService } from "../equipamentos.service";
@graphql.Resolver(() => Equipamentos)
export class EquipamentosResolverBase {
  constructor(protected readonly service: EquipamentosService) {}

  async _equipamentosItemsMeta(
    @graphql.Args() args: EquipamentosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Equipamentos])
  async equipamentosItems(
    @graphql.Args() args: EquipamentosFindManyArgs
  ): Promise<Equipamentos[]> {
    return this.service.equipamentosItems(args);
  }

  @graphql.Query(() => Equipamentos, { nullable: true })
  async equipamentos(
    @graphql.Args() args: EquipamentosFindUniqueArgs
  ): Promise<Equipamentos | null> {
    const result = await this.service.equipamentos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Equipamentos)
  async createEquipamentos(
    @graphql.Args() args: CreateEquipamentosArgs
  ): Promise<Equipamentos> {
    return await this.service.createEquipamentos({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Equipamentos)
  async updateEquipamentos(
    @graphql.Args() args: UpdateEquipamentosArgs
  ): Promise<Equipamentos | null> {
    try {
      return await this.service.updateEquipamentos({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Equipamentos)
  async deleteEquipamentos(
    @graphql.Args() args: DeleteEquipamentosArgs
  ): Promise<Equipamentos | null> {
    try {
      return await this.service.deleteEquipamentos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

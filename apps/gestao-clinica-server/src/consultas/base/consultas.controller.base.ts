/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsultasService } from "../consultas.service";
import { ConsultasCreateInput } from "./ConsultasCreateInput";
import { Consultas } from "./Consultas";
import { ConsultasFindManyArgs } from "./ConsultasFindManyArgs";
import { ConsultasWhereUniqueInput } from "./ConsultasWhereUniqueInput";
import { ConsultasUpdateInput } from "./ConsultasUpdateInput";
import { TratamentosFindManyArgs } from "../../tratamentos/base/TratamentosFindManyArgs";
import { Tratamentos } from "../../tratamentos/base/Tratamentos";
import { TratamentosWhereUniqueInput } from "../../tratamentos/base/TratamentosWhereUniqueInput";

export class ConsultasControllerBase {
  constructor(protected readonly service: ConsultasService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consultas })
  async createConsultas(
    @common.Body() data: ConsultasCreateInput
  ): Promise<Consultas> {
    return await this.service.createConsultas({
      data: {
        ...data,

        paciente: data.paciente
          ? {
              connect: data.paciente,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        data: true,
        diagnStico: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consultas] })
  @ApiNestedQuery(ConsultasFindManyArgs)
  async consultasItems(@common.Req() request: Request): Promise<Consultas[]> {
    const args = plainToClass(ConsultasFindManyArgs, request.query);
    return this.service.consultasItems({
      ...args,
      select: {
        createdAt: true,
        data: true,
        diagnStico: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consultas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consultas(
    @common.Param() params: ConsultasWhereUniqueInput
  ): Promise<Consultas | null> {
    const result = await this.service.consultas({
      where: params,
      select: {
        createdAt: true,
        data: true,
        diagnStico: true,
        id: true,

        paciente: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consultas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsultas(
    @common.Param() params: ConsultasWhereUniqueInput,
    @common.Body() data: ConsultasUpdateInput
  ): Promise<Consultas | null> {
    try {
      return await this.service.updateConsultas({
        where: params,
        data: {
          ...data,

          paciente: data.paciente
            ? {
                connect: data.paciente,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          data: true,
          diagnStico: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consultas })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsultas(
    @common.Param() params: ConsultasWhereUniqueInput
  ): Promise<Consultas | null> {
    try {
      return await this.service.deleteConsultas({
        where: params,
        select: {
          createdAt: true,
          data: true,
          diagnStico: true,
          id: true,

          paciente: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tratamentosItems")
  @ApiNestedQuery(TratamentosFindManyArgs)
  async findTratamentosItems(
    @common.Req() request: Request,
    @common.Param() params: ConsultasWhereUniqueInput
  ): Promise<Tratamentos[]> {
    const query = plainToClass(TratamentosFindManyArgs, request.query);
    const results = await this.service.findTratamentosItems(params.id, {
      ...query,
      select: {
        consulta: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descriO: true,
        id: true,
        nome: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tratamentosItems")
  async connectTratamentosItems(
    @common.Param() params: ConsultasWhereUniqueInput,
    @common.Body() body: TratamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tratamentosItems: {
        connect: body,
      },
    };
    await this.service.updateConsultas({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tratamentosItems")
  async updateTratamentosItems(
    @common.Param() params: ConsultasWhereUniqueInput,
    @common.Body() body: TratamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tratamentosItems: {
        set: body,
      },
    };
    await this.service.updateConsultas({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tratamentosItems")
  async disconnectTratamentosItems(
    @common.Param() params: ConsultasWhereUniqueInput,
    @common.Body() body: TratamentosWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tratamentosItems: {
        disconnect: body,
      },
    };
    await this.service.updateConsultas({
      where: params,
      data,
      select: { id: true },
    });
  }
}

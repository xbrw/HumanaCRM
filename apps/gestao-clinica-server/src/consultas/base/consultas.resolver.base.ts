/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Consultas } from "./Consultas";
import { ConsultasCountArgs } from "./ConsultasCountArgs";
import { ConsultasFindManyArgs } from "./ConsultasFindManyArgs";
import { ConsultasFindUniqueArgs } from "./ConsultasFindUniqueArgs";
import { CreateConsultasArgs } from "./CreateConsultasArgs";
import { UpdateConsultasArgs } from "./UpdateConsultasArgs";
import { DeleteConsultasArgs } from "./DeleteConsultasArgs";
import { TratamentosFindManyArgs } from "../../tratamentos/base/TratamentosFindManyArgs";
import { Tratamentos } from "../../tratamentos/base/Tratamentos";
import { Pacientes } from "../../pacientes/base/Pacientes";
import { ConsultasService } from "../consultas.service";
@graphql.Resolver(() => Consultas)
export class ConsultasResolverBase {
  constructor(protected readonly service: ConsultasService) {}

  async _consultasItemsMeta(
    @graphql.Args() args: ConsultasCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Consultas])
  async consultasItems(
    @graphql.Args() args: ConsultasFindManyArgs
  ): Promise<Consultas[]> {
    return this.service.consultasItems(args);
  }

  @graphql.Query(() => Consultas, { nullable: true })
  async consultas(
    @graphql.Args() args: ConsultasFindUniqueArgs
  ): Promise<Consultas | null> {
    const result = await this.service.consultas(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Consultas)
  async createConsultas(
    @graphql.Args() args: CreateConsultasArgs
  ): Promise<Consultas> {
    return await this.service.createConsultas({
      ...args,
      data: {
        ...args.data,

        paciente: args.data.paciente
          ? {
              connect: args.data.paciente,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Consultas)
  async updateConsultas(
    @graphql.Args() args: UpdateConsultasArgs
  ): Promise<Consultas | null> {
    try {
      return await this.service.updateConsultas({
        ...args,
        data: {
          ...args.data,

          paciente: args.data.paciente
            ? {
                connect: args.data.paciente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consultas)
  async deleteConsultas(
    @graphql.Args() args: DeleteConsultasArgs
  ): Promise<Consultas | null> {
    try {
      return await this.service.deleteConsultas(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Tratamentos], { name: "tratamentosItems" })
  async findTratamentosItems(
    @graphql.Parent() parent: Consultas,
    @graphql.Args() args: TratamentosFindManyArgs
  ): Promise<Tratamentos[]> {
    const results = await this.service.findTratamentosItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Pacientes, {
    nullable: true,
    name: "paciente",
  })
  async getPaciente(
    @graphql.Parent() parent: Consultas
  ): Promise<Pacientes | null> {
    const result = await this.service.getPaciente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
